
generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //onDelete means if of the two an account or a user is deleted cascade means delte both table

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid()) //cuid generate random id which is a string of bunch of number
  name String?
  email String? @unique
  emailVerified DateTime?  //checked when email is verified
  image String?
  accounts Account[] //user have multiple account
  sessions Session[] 
  jobs Job[] @relation("PostedJobs")
  applications Application[]
}

model Job {
  id String @id @default(cuid())
  title String
  company String
  location String
  type String
  description String @db.Text
  salary String?

  postedAt DateTime @default(now())
  postedBy User @relation("PostedJobs", fields: [postedById], references: [id])
  postedById String

  applications Application[]
}

model Application {
  id String @id @default(cuid())
  jobId String
  userId String
  status String @default("PENDING") // REVIEWING, ACCEPTED, REJECTED
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  job Job @relation(fields: [jobId], references: [id])

  @@unique([jobId, userId])
}
